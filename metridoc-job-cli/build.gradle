apply plugin: "application"
apply plugin: "propdeps"
apply plugin: "propdeps-maven"
apply plugin: 'propdeps-idea'
apply plugin: 'propdeps-eclipse'

mainClassName = "metridoc.cli.MetridocMain"
applicationName = "mdoc"

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

sourceSets {
    integTest {
        groovy {
            srcDir "src/integ/groovy"
        }
        resources {
            srcDir "src/integ/resources"
        }
    }
}

buildscript {
    repositories {
        maven { url 'http://repo.springsource.org/plugins-release' }
    }

    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.1'
    }
}

project.ext {
    bintrayRepo = "http://dl.bintray.com/upennlib/metridoc-distributions"
}

dependencies {
    //core libraries that are required to get the cli up and running
    compile 'org.codehaus.groovy:groovy-all:2.0.8', 'org.apache.commons:commons-compress:1.5',
            'commons-cli:commons-cli:1.2', 'org.slf4j:slf4j-simple:1.7.5'

    //metridoc
    if(project.version.contains("SNAPSHOT")) {
        compile project(":metridoc-tool-gorm")
    }
    else {
        provided project(":metridoc-tool-gorm")
    }

    //other helpful libraries
    provided 'org.apache.commons:commons-email:1.3.1'
    provided 'org.apache.poi:poi:3.8-beta3'
    provided ('org.apache.poi:poi-ooxml:3.8-beta3') {
        exclude module: 'poi'
        exclude module: 'dom4j'
    }

    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'

    integTestCompile 'org.codehaus.groovy:groovy-all:2.0.8',
            "org.spockframework:spock-core:0.7-groovy-2.0"
}

task publishDistribution(dependsOn: "distZip") << {
    assert project.hasProperty("bintrayUsername") && project.hasProperty("bintrayPassword") : "bintray credentials " +
            "not set"

    new URI("https://api.bintray.com/content/upennlib/metridoc-distributions/${archivesBaseName}/$version/${distZip.archiveName}").toURL().openConnection().with {
        // Add basic authentication header.
        setRequestProperty "Authorization", "Basic " + "$bintrayUsername:$bintrayPassword".getBytes().encodeBase64().toString()
        doOutput = true
        artifactFile = distZip.archivePath
        fixedLengthStreamingMode = artifactFile.size()
        requestMethod = "PUT"

        def inputStream = artifactFile.newInputStream()
        try {
            outputStream << inputStream
        }
        finally {
            inputStream.close()
            outputStream.close()
        }

        assert responseCode >= 200 && responseCode < 300
    }

    def bintrayRepo = "https://api.bintray.com/content/upennlib/metridoc-distributions/" +
            "${project.properties.archivesBaseName}/$project.version/publish"
    project.logger.info "publishing to $bintrayRepo"
    new URI(bintrayRepo).toURL().openConnection().with {
        doOutput = true
        doInput = true
        // Add basic authentication header.
        setRequestProperty "Authorization", "Basic " + "$bintrayUsername:$bintrayPassword".getBytes().encodeBase64().toString()
        requestMethod = "POST"
        outputStream.flush()
        outputStream.close()
        project.logger.info inputStream.text
        inputStream.close()

        assert responseCode >= 200 && responseCode < 300
    }
}

task copyDependenciesToLib(type: Copy, dependsOn: ["installApp"]) {
    def destination = "$buildDir/install/$applicationName/lib"
    if (project.hasProperty("dependenciesDestination")) {
        destination = project.dependenciesDestination
    }
    into destination
    from configurations.provided
}

//for a single test, you can run "gradle -DintegTests.single=<test name>"
task integTests(type: Test, dependsOn: "copyDependenciesToLib") {

    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath

    include "**/*Spec*"
    exclude "**/Abstract*Spec*"
}

startScripts {
    doLast {
        File windowsScriptFile = file getWindowsScript()
        File unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replaceFirst(/CLASSPATH=[^\s]+/, 'CLASSPATH=%APP_HOME%\\\\lib\\\\*')
        unixScriptFile.text = unixScriptFile.text.replaceFirst(/CLASSPATH=[^\s]+/, 'CLASSPATH=\\$APP_HOME/lib/*')
    }
}

task createDependencyFile << {

    def dependencyFile = new File(project.projectDir as File, "src/main/resources/DEPENDENCY_URLS")
    def jcenterUrl = "http://jcenter.bintray.com"
    def metridocUrl = "http://dl.bintray.com/upennlib/metridoc"
    def mavenUrl = "http://repo1.maven.org/maven2"

    dependencyFile.withPrintWriter("utf-8") { PrintWriter writer ->
        configurations.provided.resolvedConfiguration.resolvedArtifacts.each {
            def dep = it.resolvedDependency
            String moduleGroup = dep.moduleGroup
            def moduleVersion = dep.moduleVersion
            def moduleName = dep.moduleName
            def baseUrl = moduleName.contains("metridoc") ? metridocUrl : jcenterUrl
            baseUrl = moduleName.contains("groovy-stream") ? mavenUrl : baseUrl

            writer.println "$baseUrl/${moduleGroup.replaceAll(/\./, "/")}/$moduleName/$moduleVersion/" +
                    "$moduleName-${moduleVersion}.jar"
        }
    }
}

task testDependencyFile(dependsOn: "createDependencyFile") << {
    new File(project.projectDir as File, "src/main/resources/DEPENDENCY_URLS").eachLine("utf-8") {String line ->
        new URL(line).openConnection().with {
            requestMethod = "HEAD"
            inputStream.close()
            assert responseCode >= 200 && responseCode < 300
        }
    }
}

compileGroovy.dependsOn "createDependencyFile"