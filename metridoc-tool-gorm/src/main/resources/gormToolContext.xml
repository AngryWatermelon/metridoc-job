<!--
  ~Copyright 2013 Trustees of the University of Pennsylvania. Licensed under the
  ~	Educational Community License, Version 2.0 (the "License"); you may
  ~	not use this file except in compliance with the License. You may
  ~	obtain a copy of the License at
  ~
  ~http://www.osedu.org/licenses/ECL-2.0
  ~
  ~	Unless required by applicable law or agreed to in writing,
  ~	software distributed under the License is distributed on an "AS IS"
  ~	BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
  ~	or implied. See the License for the specific language governing
  ~	permissions and limitations under the License.  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:gsp="http://groovy.codehaus.org/2005/gsp"
       xmlns:gorm="http://grails.org/schema/gorm"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
                http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
                http://grails.org/schema/gorm http://grails.org/schema/gorm/gorm.xsd">

    <bean id="pluginManager" class="org.codehaus.groovy.grails.plugins.GrailsPluginManagerFactoryBean">
        <property name="grailsDescriptor" value="classpath:/grails.xml"/>
        <property name="application" ref="grailsApplication"/>
    </bean>

    <bean id="grailsConfigurator" class="org.codehaus.groovy.grails.commons.spring.GrailsRuntimeConfigurator"
          init-method="configure" depends-on="pluginManager">
        <constructor-arg>
            <ref bean="grailsApplication"/>
        </constructor-arg>
        <property name="pluginManager" ref="pluginManager"/>
    </bean>

    <bean id="grailsResourceLoader" class="org.codehaus.groovy.grails.commons.GrailsResourceLoaderFactoryBean"/>

    <bean id="eventTriggeringInterceptor"
          class="org.codehaus.groovy.grails.orm.hibernate.support.ClosureEventTriggeringInterceptor"/>

    <gorm:sessionFactory base-package="NA" data-source-ref="dataSource"
                         message-source-ref="messageSource">
        <property name="hibernateProperties">
            <util:map>
                <gsp:scriptlet>hibernateProperties.each {key, value -></gsp:scriptlet>
                <entry key="${key}" value="${value}"/>
                <gsp:scriptlet>}</gsp:scriptlet>
            </util:map>
        </property>
        <property name="eventListeners">
            <util:map>
                <entry key="flush">
                    <bean class="org.codehaus.groovy.grails.orm.hibernate.events.PatchedDefaultFlushEventListener"/>
                </entry>
                <entry key="pre-load" value-ref="eventTriggeringInterceptor"/>
                <entry key="post-load" value-ref="eventTriggeringInterceptor"/>
                <entry key="save" value-ref="eventTriggeringInterceptor"/>
                <entry key="save-update" value-ref="eventTriggeringInterceptor"/>
                <entry key="pre-insert" value-ref="eventTriggeringInterceptor"/>
                <entry key="post-insert" value-ref="eventTriggeringInterceptor"/>
                <entry key="pre-update" value-ref="eventTriggeringInterceptor"/>
                <entry key="post-update" value-ref="eventTriggeringInterceptor"/>
                <entry key="pre-delete" value-ref="eventTriggeringInterceptor"/>
                <entry key="post-delete" value-ref="eventTriggeringInterceptor"/>
            </util:map>
        </property>
    </gorm:sessionFactory>

    <bean id="grailsDomainClassMappingContext"
          class="org.codehaus.groovy.grails.domain.GrailsDomainClassMappingContext">
        <constructor-arg name="grailsApplication" ref="grailsApplication"/>
    </bean>

    <bean id="hibernateDatastore" class="metridoc.tool.gorm.HibernateDatastoreFactoryBean">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="grailsApplication" ref="grailsApplication"/>
        <property name="mappingContext" ref="grailsDomainClassMappingContext"/>
        <property name="interceptor" ref="eventTriggeringInterceptor"/>
    </bean>

    <bean id="gormEnhancingPostProcessor" class="metridoc.tool.gorm.GormEnhancingBeanPostProcessor">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="application" ref="grailsApplication"/>
    </bean>

    <bean id="gormClassLoaderPostProcessor" class="metridoc.tool.gorm.GormClassLoaderPostProcessor">
        <property name="gormBeans" value="${gormBeans}"/>
    </bean>

    <bean id="eventInterceptor" class="org.codehaus.groovy.grails.orm.hibernate.EventTriggeringInterceptor">
        <constructor-arg index="0" ref="hibernateDatastore"/>
        <constructor-arg index="1" value="#{grailsApplication.config}"/>
    </bean>

    <gsp:scriptlet>if(useFactoryMethod) {</gsp:scriptlet>
        <bean id="dataSource" class="metridoc.service.gorm.GormService" factory-method="getDataSoruce">
            <constructor-arg>
                <value>${dataSourcePrefix}</value>
            </constructor-arg>
        </bean>
    <gsp:scriptlet>} else {</gsp:scriptlet>
        <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
            <gsp:scriptlet>dataSourceProperties.each {key, value -></gsp:scriptlet>
            <property name="${key}" value="${value}"/>
            <gsp:scriptlet>}</gsp:scriptlet>
        </bean>
    <gsp:scriptlet>}</gsp:scriptlet>
</beans>